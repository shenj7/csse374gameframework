Engineering Notebook

Violated design principles:
1) Don't duplicate code. There are multiple attributes/methods in both WordGuessingGame and NumberGuessingGame, such as scanner and showResult(), which could be lifted up into a parent class.  By keeping certain common fields in an abstract class, we can avoid duplicating code and provide a common structure to each game.

2) Add flexibility. Having each of these methods in a separate class makes it difficult to change the functionality - for example, changing the showResult() method to displaying in a JFrame instead of printing to the console. By creating an abstract class and using the template method, we can change functionality without having to modify every class.

New design:
See classdiagram.png
1) Major design decisions:
	- I chose to use the template pattern to create the main game framework, as each game follows the same flow.
	- I chose to have the users in an arrayList, as multi-player games can use this effectively, while single-player games could use the same structure, with an arraylist size of 1.

2) Potential tradeoffs: 
	- If there is a game that deviates significantly from the existing game structure, it would be difficult to include into the game application
	- Similarly to the previous tradeoff, it would be difficult to create a game with a different game structure.

Supporting new feature:
See newfeatureclassdiagram.png
1) Major design decisions:
	- Keep GameFramework as an interface. By doing so, we can make a new BoardGame that has the same structure as a Game, but uses the methods from a GameFramework, such as a Board, to suport a board game.
	- By having the GameFramework seperate from Game, we continue to have the same logic as from the command-line games, allowing us to continue using the old games' logic, while still supporting features from a new kinda of game.

2) Possible tradeoffs:
	- Another possible design for this would be making another abstract class, BoardGameFramework, that allows for the support of a board game, with methods like createBoard(). However, having an interface allows for fewer dependencies, as the support for the board game does not need to depend on the concrete implementation of certain methods in the Game superclass.